"""
bot.py

@cat_game_kodland_bot - –Ω–∞–∑–≤–∞–Ω–∏–µ –±–æ—Ç–∞ –≤ Telegram

"""
import telebot
import requests
from telebot import types

BOT_TOKEN = "8327776931:AAFfrOaaCy04khc5HgwAFvtvjIqoRRG0tek"
API_URL = "http://127.0.0.1:5000"

bot = telebot.TeleBot(BOT_TOKEN)


def main_menu():
    """_summary_

    Returns:
        _type_: _description_
    """
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("üéÆ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è")
    btn2 = types.KeyboardButton("üèÜ –õ–∏–¥–µ—Ä–±–æ—Ä–¥")
    markup.add(btn1, btn2)
    return markup


def control_menu():
    """_summary_

    Returns:
        _type_: _description_
    """
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row("‚¨ÜÔ∏è")
    markup.row("‚¨ÖÔ∏è", "‚û°Ô∏è")
    markup.row("‚¨áÔ∏è")
    markup.add("‚¨ÖÔ∏è –í –º–µ–Ω—é")
    return markup


@bot.message_handler(commands=["start"])
def start(message):
    """_summary_

    Args:
        message (_type_): _description_
    """
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! üê± –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É.", reply_markup=main_menu())


@bot.message_handler(func=lambda m: m.text == "üéÆ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è")
def join_game(message):
    """_summary_

    Args:
        message (_type_): _description_
    """
    username = message.from_user.username or f"user{message.from_user.id}"
    try:
        response = requests.post(f"{API_URL}/join", json={"username": username})
        data = response.json()
        if response.status_code in (200, 201):
            bot.send_message(
                message.chat.id,
                f"–¢—ã –≤ –∏–≥—Ä–µ! üéâ\n–ü–æ–∑–∏—Ü–∏—è: {data['player']}",
                reply_markup=control_menu(),
            )
        else:
            bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {data.get('error')}")
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")


@bot.message_handler(func=lambda m: m.text in ["‚¨ÜÔ∏è", "‚¨áÔ∏è", "‚¨ÖÔ∏è", "‚û°Ô∏è"])
def move(message):
    """_summary_

    Args:
        message (_type_): _description_
    """
    username = message.from_user.username or f"user{message.from_user.id}"
    directions = {
        "‚¨ÜÔ∏è": "up",
        "‚¨áÔ∏è": "down",
        "‚¨ÖÔ∏è": "left",
        "‚û°Ô∏è": "right",
    }
    action = directions.get(message.text)

    try:
        response = requests.post(f"{API_URL}/action", json={"username": username, "action": action})
        data = response.json()
        if response.status_code == 200:
            bot.send_message(
                message.chat.id,
                f"‚û°Ô∏è –î–≤–∏–∂–µ–Ω–∏–µ: {action}\nüí∞ –ú–æ–Ω–µ—Ç: {data['player']['coins']}",
            )
        else:
            bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {data.get('error')}")
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")


@bot.message_handler(func=lambda m: m.text == "‚¨ÖÔ∏è –í –º–µ–Ω—é")
def back_to_menu(message):
    """_summary_

    Args:
        message (_type_): _description_
    """
    bot.send_message(message.chat.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())


@bot.message_handler(func=lambda m: m.text == "üèÜ –õ–∏–¥–µ—Ä–±–æ—Ä–¥")
def show_leaderboard(message):
    """_summary_

    Args:
        message (_type_): _description_
    """
    try:
        response = requests.get(f"{API_URL}/state")
        data = response.json()
        players = data.get("players", [])
        players.sort(key=lambda p: p["coins"], reverse=True)

        if not players:
            bot.send_message(message.chat.id, "–ü–æ–∫–∞ –Ω–µ—Ç –∏–≥—Ä–æ–∫–æ–≤ üí§")
            return

        text = "üèÜ *–¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤:*\n\n"
        for i, p in enumerate(players, 1):
            text += f"{i}. {p['username']} ‚Äî {p['coins']} –º–æ–Ω–µ—Ç\n"

        bot.send_message(message.chat.id, text, parse_mode="Markdown")
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {e}")


print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
bot.polling(none_stop=True)
